docker run -d --name postgresdb -e POSTGRES_USER=admin -e POSTGRES_PASSWORD=1234 -p 5432:5432 -v pgdata:/var/lib/postgresql/data postgres

docker start postgresdb

docker exec -it postgresdb psql -U admin

CREATE DATABASE mtcgdb;

\c mtcgdb

CREATE TABLE IF NOT EXISTS users(
	id SERIAL PRIMARY KEY, 
	username VARCHAR(50) UNIQUE NOT NULL,
	password VARCHAR(255) NOT NULL, 
	currency INT DEFAULT 20, 
	elo INT DEFAULT 100, 
    token varchar(50)
);

CREATE TABLE cards (
    cid varchar(128) UNIQUE PRIMARY KEY,
    name VARCHAR(32) NOT NULL,
    damage DOUBLE PRECISION NOT NULL,
    cardType VARCHAR(255),
    element VARCHAR(255)
);

CREATE TABLE packages (
    pid SERIAL PRIMARY KEY
);

CREATE TABLE packageCards (
    pid INT,
    cid VARCHAR(128),
    PRIMARY KEY(pid, cid),
    FOREIGN KEY(pid) REFERENCES packages(pid),
    FOREIGN KEY(cid) REFERENCES cards(cid)
);

CREATE TABLE stacks (
    sid SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    FOREIGN KEY (username) REFERENCES users(username)
);

CREATE TABLE stackCards (
    sid INT NOT NULL,
    cardId varchar(128) NOT NULL,
    FOREIGN KEY (sid) REFERENCES stacks(sid),
    FOREIGN KEY (cid) REFERENCES cards(cid)
);

CREATE TABLE decks (
    did SERIAL PRIMARY KEY,
    username_referenz VARCHAR(50) NOT NULL,
    FOREIGN KEY (username_referenz) REFERENCES users(username)
);

CREATE TABLE deckCards (
    did INT NOT NULL,
    cardId varchar(128) NOT NULL,
    FOREIGN KEY (did) REFERENCES decks(did),
    FOREIGN KEY (cardId) REFERENCES cards(cid)
);

CREATE TABLE Battle (
    BattleID SERIAL PRIMARY KEY,
    ChallengerUserID INTEGER NOT NULL,
    OpponentUserID INTEGER NOT NULL,
    WinnerUserID INTEGER NULL,
    CONSTRAINT fk_challenger
        FOREIGN KEY (ChallengerUserID)
        REFERENCES users(id),
    CONSTRAINT fk_opponent
        FOREIGN KEY (OpponentUserID)
        REFERENCES users(id),
    CONSTRAINT fk_winner
        FOREIGN KEY (WinnerUserID)
        REFERENCES users(id)
);

DELETE FROM packageCards; DELETE FROM packages; DELETE FROM deckCards; DELETE FROM decks; DELETE FROM stackCards; DELETE FROM stacks; DELETE FROM users; DELETE FROM cards;